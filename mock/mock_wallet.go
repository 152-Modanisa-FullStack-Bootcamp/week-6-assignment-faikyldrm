// Code generated by MockGen. DO NOT EDIT.
// Source: .\wallet\wallet.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	model "wallet/model"

	gomock "github.com/golang/mock/gomock"
)

// MockIWallet is a mock of IWallet interface.
type MockIWallet struct {
	ctrl     *gomock.Controller
	recorder *MockIWalletMockRecorder
}

// MockIWalletMockRecorder is the mock recorder for MockIWallet.
type MockIWalletMockRecorder struct {
	mock *MockIWallet
}

// NewMockIWallet creates a new mock instance.
func NewMockIWallet(ctrl *gomock.Controller) *MockIWallet {
	mock := &MockIWallet{ctrl: ctrl}
	mock.recorder = &MockIWalletMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWallet) EXPECT() *MockIWalletMockRecorder {
	return m.recorder
}

// ChangeWalletAmount mocks base method.
func (m *MockIWallet) ChangeWalletAmount(opWallet *model.Wallet, amount float64) (*model.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeWalletAmount", opWallet, amount)
	ret0, _ := ret[0].(*model.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeWalletAmount indicates an expected call of ChangeWalletAmount.
func (mr *MockIWalletMockRecorder) ChangeWalletAmount(opWallet, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeWalletAmount", reflect.TypeOf((*MockIWallet)(nil).ChangeWalletAmount), opWallet, amount)
}

// CheckWalletExists mocks base method.
func (m *MockIWallet) CheckWalletExists(user string) (*model.Wallet, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckWalletExists", user)
	ret0, _ := ret[0].(*model.Wallet)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// CheckWalletExists indicates an expected call of CheckWalletExists.
func (mr *MockIWalletMockRecorder) CheckWalletExists(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckWalletExists", reflect.TypeOf((*MockIWallet)(nil).CheckWalletExists), user)
}

// CreateWallet mocks base method.
func (m *MockIWallet) CreateWallet(user string, initialAmount float64) *model.Wallet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", user, initialAmount)
	ret0, _ := ret[0].(*model.Wallet)
	return ret0
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockIWalletMockRecorder) CreateWallet(user, initialAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockIWallet)(nil).CreateWallet), user, initialAmount)
}

// GetWallet mocks base method.
func (m *MockIWallet) GetWallet(user string) (*model.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", user)
	ret0, _ := ret[0].(*model.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockIWalletMockRecorder) GetWallet(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockIWallet)(nil).GetWallet), user)
}

// GetWallets mocks base method.
func (m *MockIWallet) GetWallets() (*map[string]model.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallets")
	ret0, _ := ret[0].(*map[string]model.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallets indicates an expected call of GetWallets.
func (mr *MockIWalletMockRecorder) GetWallets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallets", reflect.TypeOf((*MockIWallet)(nil).GetWallets))
}
