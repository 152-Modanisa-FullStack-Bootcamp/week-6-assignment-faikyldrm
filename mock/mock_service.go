// Code generated by MockGen. DO NOT EDIT.
// Source: .\service\service.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	model "wallet/model"

	gomock "github.com/golang/mock/gomock"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// ChangeWalletAmount mocks base method.
func (m *MockIService) ChangeWalletAmount(user string, amount float64) (*model.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeWalletAmount", user, amount)
	ret0, _ := ret[0].(*model.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeWalletAmount indicates an expected call of ChangeWalletAmount.
func (mr *MockIServiceMockRecorder) ChangeWalletAmount(user, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeWalletAmount", reflect.TypeOf((*MockIService)(nil).ChangeWalletAmount), user, amount)
}

// CheckWalletExists mocks base method.
func (m *MockIService) CheckWalletExists(user string) (*model.Wallet, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckWalletExists", user)
	ret0, _ := ret[0].(*model.Wallet)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// CheckWalletExists indicates an expected call of CheckWalletExists.
func (mr *MockIServiceMockRecorder) CheckWalletExists(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckWalletExists", reflect.TypeOf((*MockIService)(nil).CheckWalletExists), user)
}

// CreateWallet mocks base method.
func (m *MockIService) CreateWallet(user string) (*model.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", user)
	ret0, _ := ret[0].(*model.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockIServiceMockRecorder) CreateWallet(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockIService)(nil).CreateWallet), user)
}

// GetWallet mocks base method.
func (m *MockIService) GetWallet(user string) (*model.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", user)
	ret0, _ := ret[0].(*model.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockIServiceMockRecorder) GetWallet(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockIService)(nil).GetWallet), user)
}

// GetWallets mocks base method.
func (m *MockIService) GetWallets() ([]model.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallets")
	ret0, _ := ret[0].([]model.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallets indicates an expected call of GetWallets.
func (mr *MockIServiceMockRecorder) GetWallets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallets", reflect.TypeOf((*MockIService)(nil).GetWallets))
}
